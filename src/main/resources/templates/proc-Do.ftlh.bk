/**********************************************************************/
/*                           do_${procDo.tableNameNotCamel}.pc         */
/**********************************************************************/
/* processes L_${procDo.tableNameNotCamel}  insert into ${procDo.tableNameNotCamel}   */
/*                                                                    */
/* Usage: do_${procDo.tableNameNotCamel} <ORACLE-ID>                  */
/*                                                                    */
/*                    Created by ProcDo Generator                     */
/**********************************************************************/

#include "stdio.h"

#define  FETCH_ALLOW  100
#define  YES            1
#define  NO             0
#define  TRUE           1
#define  FALSE          0
#define  OK             0
#define  ORAERR         9

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR  dbs_id[30];

/* For Insert */
VARCHAR  prom_type[2];

/* For Read */
VARCHAR  r_prom_type[100][2];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE sqlca.h;
EXEC SQL INCLUDE oraca.h;

int  ${procDo.tableNameNotCamel}_count = 0;
int  l_${procDo.tableNameNotCamel}_count = 0;

char *pname;

EXEC ORACLE OPTION (SELECT_ERROR = NO);
EXEC SQL WHENEVER SQLERROR GOTO error;
main( argc, argv )
  int  argc;
  char **argv;
{
  char *f, *strrchr();

  pname = argv[0];

  if (argc != 2) {
    fprintf(stderr, "%s: Usage: %s <ORACLE-ID> \n",
	    pname , ((f = strrchr(pname, '/')) == NULL)? pname : ++f);
    exit(1);
  }

  strcpy(dbs_id.arr, argv[1]);
  dbs_id.len = strlen(dbs_id.arr);
  EXEC SQL CONNECT :dbs_id;

  pr_all_recs() ;

  printf("插入 ${procDo.tableNameNotCamel} %5d 筆資料 刪除 l_${procDo.tableNameNotCamel} %5d 筆資料",${procDo.tableNameNotCamel}_count,l_${procDo.tableNameNotCamel}_count) ;

  ap_exit(OK);

  error:
    dbs_error("main");
    ap_exit(ORAERR);
} /* main() */


pr_all_recs()
{
  while (read_l_${procDo.tableNameNotCamel}()) {
    ins_${procDo.tableNameNotCamel}();
    delete_l_${procDo.tableNameNotCamel}();
  }

  return;

  error:
    dbs_error("pr_all_recs");
    ap_exit(ORAERR);
} /* pr_all_recs() */

read_l_${procDo.tableNameNotCamel}()
{
  int  i;
  static int this_red = FETCH_ALLOW,
	     in       = FETCH_ALLOW;

  if (this_red == in) {
    EXEC SQL COMMIT WORK;
    if (this_red < 100)
      return(FALSE); /* EOF */

    /* 初始化 Read 資料 */
    for(i = 0; i < FETCH_ALLOW ; i++) {

      /* For Varchar */
      r_prom_type[i].arr[0]       = '\0' ;
      r_prom_type[i].len          =   0  ;

      /* r_item_no[i]                = 0    ; For Int */

    }

    in = 0;
    EXEC SQL SELECT
              prom_type;
             INTO
              :r_prom_type;
             FROM L_${procDo.tableNameNotCamel};

    this_red = sqlca.sqlerrd[2];
    if (this_red == 0)
      return(FALSE); /* EOF */
  }
  /* 將 R 資料複製到暫存資料 */

  /* item_no      =     r_item_no [in]; For Int */

  r_prom_type[in].arr[ r_prom_type[in].len ] = '\0';
  strcpy((char *)prom_type.arr, (char *)r_prom_type[in].arr ) ;
  prom_type.len = strlen((char *)prom_type.arr) ;

  in++;
  return(TRUE);

error:
    dbs_error("read_l_${procDo.tableNameNotCamel}");
    ap_exit(ORAERR);

} /* read_l_${procDo.tableNameNotCamel}() */

ins_${procDo.tableNameNotCamel}(){

     EXEC SQL
     INSERT INTO ${procDo.tableNameNotCamel}
     (
          prom_type
     )
     VALUES
     (
          :prom_type
     );

     ${procDo.tableNameNotCamel}_count++;

     return;

error:
    dbs_error("ins_${procDo.tableNameNotCamel}");
    ap_exit(ORAERR);
}

delete_l_${procDo.tableNameNotCamel}()
{

  EXEC SQL DELETE FROM L_${procDo.tableNameNotCamel}
           WHERE condition=:condition;

  l_${procDo.tableNameNotCamel}_count++;

  return;

error:
    dbs_error("delete_l_${procDo.tableNameNotCamel}");
    ap_exit(ORAERR);

} /* delete_l_${procDo.tableNameNotCamel}() */