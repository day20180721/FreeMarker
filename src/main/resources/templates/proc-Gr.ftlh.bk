/**********************************************************************/
/*                       gr_${procDo.tableNameNotCamel}.pc            */
/**********************************************************************/
/* Usage:gr_${procDo.tableNameNotCamel}  <id/pwd>                     */
/*                                                                    */
 /*                    Created by ProcGr Generator                    */
/**********************************************************************/
#include <stdio.h>
#include <string.h>

#define OK 0
#define ORAERR 9
#define TRUE  1
#define FETCH_SIZE 100
#define FALSE 0
#define REPORTNAME ""
#define TITLE ""

#define FORMAT "%s||\n"
#define ERRORFORMAT "%s||%s||\n"
#define SQLCA_INIT      1
EXEC SQL INCLUDE SQLCA.H;
#define ORACA_INIT      1
EXEC SQL INCLUDE ORACA.H;

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR oracle_id[30];

VARCHAR error_msg[50];

VARCHAR r_prom_type[100][10];

char    prom_type[10];

EXEC SQL END DECLARE SECTION;
EXEC SQL WHENEVER SQLERROR GOTO error;

/*--------------------------------------------------------------------*/
/*                      main()                                        */
/*--------------------------------------------------------------------*/
FILE * fp;

main(argc, argv)
  int argc;
  char *argv[];
{
  char str[132];

  if (argc != 2) {
    sprintf(str, "Usage: %s <id/pw>" , argv[0]);
    prog_error(str);
    ap_exit(1);
  }

  strcpy((char *)oracle_id.arr, argv[1]);
  oracle_id.len = strlen((char *)oracle_id.arr);
  EXEC SQL CONNECT :oracle_id;

  fp = fopen ("invalid-data.txt", "w+");

  process();

  fclose(fp);

  ap_exit(OK);

error:
  dbs_error("main");
  ap_exit(ORAERR);
} /* main() */
/*--------------------------------------------------------------------*/
/*                       process()                                    */
/*--------------------------------------------------------------------*/

int dataHasError = 0;

process()
{
  while (read_data()) {
      if(dataHasError){
        log_error_to_error_txt();
        update_${procDo.tableNameNotCamel}_status_to_error();
      } else {
        print_success_${procDo.tableNameNotCamel}();
        update_${procDo.tableNameNotCamel}_status_to_success();
      }
  }

  return;
}

/*--------------------------------------------------------------------*/
/*                      read_data()                                   */
/*--------------------------------------------------------------------*/

read_data()
{
  char str[100];
  static int first_time = 1,
             now        = 0,
             this       = FETCH_SIZE,
             in         = FETCH_SIZE;

  dataHasError = 0;

  if(first_time){
    first_time = 0;
    EXEC ORACLE OPTION( HOLD_CURSOR=YES );
    EXEC SQL DECLARE DATA_1 CURSOR FOR
    SELECT  A.PROM_TYPE
      FROM  ${procDo.tableNameNotCamel}
    EXEC SQL OPEN DATA_1;
  }

  if(this == in){
    if(this < FETCH_SIZE){
      EXEC ORACLE OPTION( HOLD_CURSOR=NO );
      EXEC SQL CLOSE DATA_1;
      return(FALSE);
    }

    EXEC SQL FETCH DATA_1
         INTO :r_prom_type;

    this = sqlca.sqlerrd[2] - now;
    now  = sqlca.sqlerrd[2];
    in   = 0;
    if(!this){
      EXEC ORACLE OPTION( HOLD_CURSOR=NO );
      EXEC SQL CLOSE DATA_1;
      return(FALSE);
    }
  }

  /* G P S */
  set_null(&r_prom_type[in]);
  strcpy(prom_type, (char *)r_prom_type[in].arr);
        
  if (dataHasError != 1
        && strcmp(prom_type,"G") != 0
        && strcmp(prom_type,"P") != 0
        && strcmp(prom_type,"S") != 0
        ) {
      dataHasError = 1;
      strcpy((char *)error_msg.arr, "prom_type 不存在");
      error_msg.len = strlen((char *)error_msg.arr);
  }

  in++;
  return(TRUE);

error:
  dbs_error("read_data");
  ap_exit(ORAERR);
} /* read_data() */


log_error_to_error_txt(){
    fprintf(fp, ERRORFORMAT,
                prom_type,
                 (char *)error_msg.arr
            );
    return;

error:
  dbs_error("log_error_to_error_txt");
  ap_exit(ORAERR);
} /* log_error_to_error_txt */

update_${procDo.tableNameNotCamel}_status_to_error(){

  EXEC SQL
  UPDATE    ${procDo.tableNameNotCamel}
     SET    STATUS = 9, /* 9 異常 */
            ERR_MSG = :error_msg
   WHERE
            ;

   return;
error:
  dbs_error("update_${procDo.tableNameNotCamel}_status_to_error");
  ap_exit(ORAERR);
} /* update_${procDo.tableNameNotCamel}_status_to_error */

print_success_${procDo.tableNameNotCamel}(){
    printf(FORMAT,
                  prom_type
          );
     return;
error:
  dbs_error("print_success_${procDo.tableNameNotCamel}");
  ap_exit(ORAERR);
}/* print_success_${procDo.tableNameNotCamel} */

update_${procDo.tableNameNotCamel}_status_to_success(){

  EXEC SQL
  UPDATE    ${procDo.tableNameNotCamel}
     SET    STATUS = 1, /* 1 成功 */
            ERR_MSG = null
   WHERE
            ;

     return;
error:
  dbs_error("update_${procDo.tableNameNotCamel}_status_to_success");
  ap_exit(ORAERR);
} /* update_${procDo.tableNameNotCamel}_status_to_success */